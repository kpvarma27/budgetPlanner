{"version":3,"sources":["logo.svg","redux/types/budgetPlans.js","services/budgetPlanService.js","redux/middleware/budgetPlans.js","redux/actions/budgetPlans.js","components/budgetPlans.js","redux/types/ledger.js","services/ledgerService.js","redux/middleware/ledger.js","redux/actions/ledger.js","components/ledger.js","container/Budgetdashboard.js","App.js","serviceWorker.js","redux/reducers/budgetPlans.js","redux/reducers/ledger.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["module","exports","getBudgetPlans","a","requestOptions","method","headers","redirect","fetch","response","json","result","addBudgetPlan","title","month","note","myHeaders","Headers","append","raw","JSON","stringify","Date","getFullYear","body","updateBudgetPlan","budget_year","budget_description","id","removeBudgetPlan","dispatch","type","budgetPlans","service","then","list","map","payload","catch","error","console","log","item","BudgetPlans","props","state","showAddPlan","selectedMonth","loading","editableId","this","setState","event","handleClose","addNewPlan","preventDefault","stopPropagation","target","elements","value","resetForm","refreshPlans","updatePlan","removeItem","dataSource","class","Spinner","animation","role","className","Modal","show","Header","Title","Body","Form","onSubmit","onFormSubmit","bind","Group","controlId","Label","Control","name","onChange","placeholder","Feedback","as","rows","style","borderTop","Button","variant","onClick","Table","striped","bordered","hover","length","onUpdate","onCancel","key","income","expense","total","display","margin","setSelection","colspan","React","Component","connect","Actions","TableRowEditable","split","addNewTransaction","amount","budget_id","updatedTransaction","removeTransaction","getTransactions","ledger","addTransaction","updateTransaction","ledgers","showAddTransaction","selectedTransactionType","selectedItem","transactions","parseFloat","toFixed","step","float","onClickEdit","onClickRemove","TableRowView","BudgetPlanDashboard","action","Container","refresh","App","Boolean","window","location","hostname","match","initialState","reducer","actionType","combineReducers","enhancerList","devToolsExtension","__REDUX_DEVTOOLS_EXTENSION__","push","composedEnhancer","compose","applyMiddleware","thunk","store","createStore","rootReducer","Application","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bffae226.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","//Initiate the api call\n\nconst GET_BUDGET_PLANS = 'GET_BUDGET_PLANS',\n    GET_BUDGET_PLANS_SUCCESS = 'GET_BUDGET_PLANS_SUCCESS',\n    GET_BUDGET_PLANS_FAILED = 'GET_BUDGET_PLANS_FAILED',\n    ADD_BUDGET_PLAN = 'ADD_BUDGET_PLAN',\n    ADD_BUDGET_PLAN_SUCCESS = 'ADD_BUDGET_PLAN_SUCCESS',\n    ADD_BUDGET_PLAN_FAILED = 'ADD_BUDGET_PLAN_FAILED',\n    UPDATE_BUDGET_PLAN = 'UPDATE_BUDGET_PLAN',\n    UPDATE_BUDGET_PLAN_SUCCESS = 'UPDATE_BUDGET_PLAN_SUCCESS',\n    UPDATE_BUDGET_PLAN_FAILED = 'UPDATE_BUDGET_PLAN_FAILED',\n    REMOVE_BUDGET_PLAN = 'REMOVE_BUDGET_PLAN',\n    REMOVE_BUDGET_PLAN_SUCCESS = 'REMOVE_BUDGET_PLAN_SUCCESS',\n    REMOVE_BUDGET_PLAN_FAILED = 'REMOVE_BUDGET_PLAN_FAILED';\n\n\n\nexport default {\n    GET_BUDGET_PLANS, GET_BUDGET_PLANS_SUCCESS, GET_BUDGET_PLANS_FAILED,\n    ADD_BUDGET_PLAN, ADD_BUDGET_PLAN_SUCCESS, ADD_BUDGET_PLAN_FAILED,\n    UPDATE_BUDGET_PLAN, UPDATE_BUDGET_PLAN_SUCCESS, UPDATE_BUDGET_PLAN_FAILED,\n    REMOVE_BUDGET_PLAN, REMOVE_BUDGET_PLAN_SUCCESS, REMOVE_BUDGET_PLAN_FAILED\n};","\nexport const getBudgetPlans = async () => {\n    var requestOptions = {\n        method: 'GET',\n        headers: { \"Access-Control-Allow-Origin\": \"*\" },\n        redirect: 'follow'\n    };\n    let response = await fetch(\"/plans\", requestOptions);\n    let result = await response.json();\n    return result.response;\n};\nexport const addBudgetPlan = async ({ title, month, note }) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var raw = JSON.stringify({ \"title\": title, \"budget_year\": new Date().getFullYear() + \" \" + month, \"budget_description\": note });\n\n    var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n    let response = await fetch(\"/plan\", requestOptions)\n    let result = await response.json();\n    return result.response;\n}\nexport const updateBudgetPlan = async ({ title, budget_year, budget_description, id }) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var raw = JSON.stringify({ title, budget_year, budget_description });\n\n    var requestOptions = {\n        method: 'PUT',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n    let response = await fetch(`/plan/${id}`, requestOptions);\n    let result = await response.json();\n    return result.response;\n}\nexport const removeBudgetPlan = async (id) => {\n    var requestOptions = {\n        method: 'DELETE',\n        redirect: 'follow'\n    };\n    let response = await fetch(`/plan/${id}`, requestOptions)\n    let result = await response.json();\n    return result.response;\n}","import * as actions from '../actions/budgetPlans';\nimport * as service from '../../services/budgetPlanService';\n\nexport function getBudgetPlans() {\n    return (dispatch) => {\n        dispatch(actions.getBudgetPlans());\n        service.getBudgetPlans().then((list) => {\n            if (list && list.map) {\n                dispatch(actions.getBudgetPlansSuccess(list));\n            } else {\n                throw 'Failed';\n            }\n        }).catch((error) => {\n            console.log(error);\n            dispatch(actions.getBudgetPlansFailed());\n        });\n    }\n}\nexport function addBudgetPlan(item) {\n    return (dispatch) => {\n        dispatch(actions.addBudgetPlan());\n        service.addBudgetPlan(item).then((response) => {\n            if (response == \"Inserted\") {\n                dispatch(actions.addBudgetPlanSuccess());\n                getBudgetPlans()(dispatch);\n            } else {\n                throw \"Failed\";\n            }\n        }).catch((error) => {\n            console.log(error);\n            dispatch(actions.addBudgetPlanFailed());\n        });\n    }\n}\nexport function updateBudgetPlan(item) {\n    return (dispatch) => {\n        dispatch(actions.updateBudgetPlan());\n        service.updateBudgetPlan(item).then((response) => {\n            if (response == \"Updated\") {\n                dispatch(actions.updateBudgetPlanSuccess());\n                getBudgetPlans()(dispatch);\n            } else {\n                throw \"Failed\";\n            }\n        }).catch((error) => {\n            console.log(error);\n            dispatch(actions.updateBudgetPlanFailed());\n        });\n    }\n}\nexport function removeBudgetPlan(id) {\n    return (dispatch) => {\n        dispatch(actions.removeBudgetPlan());\n        service.removeBudgetPlan(id).then((response) => {\n            if (response == \"Deleted\") {\n                dispatch(actions.removeBudgetPlanSuccess());\n                getBudgetPlans()(dispatch);\n            } else {\n                throw \"Failed\";\n            }\n        }).catch((error) => {\n            console.log(error);\n            dispatch(actions.removeBudgetPlanFailed());\n        });\n    }\n}","import budgetPlans from '../types/budgetPlans';\n\nexport function getBudgetPlans() {\n    return {\n        type: budgetPlans.GET_BUDGET_PLANS\n    }\n}\nexport function getBudgetPlansSuccess(response) {\n    return {\n        type: budgetPlans.GET_BUDGET_PLANS_SUCCESS,\n        payload: {\n            response\n        }\n    }\n}\nexport function getBudgetPlansFailed() {\n    return {\n        type: budgetPlans.GET_BUDGET_PLANS_FAILED\n    }\n}\n\nexport function addBudgetPlan() {\n    return {\n        type: budgetPlans.ADD_BUDGET_PLAN\n    }\n}\nexport function addBudgetPlanSuccess() {\n    return {\n        type: budgetPlans.ADD_BUDGET_PLAN_SUCCESS\n    }\n}\nexport function addBudgetPlanFailed() {\n    return {\n        type: budgetPlans.ADD_BUDGET_PLAN_FAILED\n    }\n}\n\nexport function updateBudgetPlan() {\n    return {\n        type: budgetPlans.UPDATE_BUDGET_PLAN\n    }\n}\n\nexport function updateBudgetPlanSuccess() {\n    return {\n        type: budgetPlans.UPDATE_BUDGET_PLAN_SUCCESS\n    }\n}\nexport function updateBudgetPlanFailed() {\n    return {\n        type: budgetPlans.UPDATE_BUDGET_PLAN_FAILED\n    }\n}\n\nexport function removeBudgetPlan() {\n    return {\n        type: budgetPlans.REMOVE_BUDGET_PLAN\n    }\n}\nexport function removeBudgetPlanSuccess() {\n    return {\n        type: budgetPlans.REMOVE_BUDGET_PLAN_SUCCESS\n    }\n}\nexport function removeBudgetPlanFailed() {\n    return {\n        type: budgetPlans.REMOVE_BUDGET_PLAN_FAILED\n    }\n}\n","import React from \"react\";\nimport { connect } from 'react-redux';\nimport * as Actions from '../redux/middleware/budgetPlans';\nimport { Button, Modal, Form, Table, Container, Spinner } from \"react-bootstrap\";\n//import authentication from '../service/authentication/authentication';\nimport './budgetPlans.css';\nclass BudgetPlans extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showAddPlan: false,\n            selectedMonth: '',\n            note: '',\n            title: '',\n            loading: false,\n            editableId: ''\n        }\n    }\n    handleClose() {\n        this.setState({ showAddPlan: false });\n    }\n    resetForm() {\n        this.setState({ title: '', selectedMonth: 'January', note: '' });\n    }\n    onFormSubmit(event) {\n        this.handleClose();\n        const {\n            addNewPlan } = this.props;\n        event.preventDefault();\n        event.stopPropagation();\n        const { title, note, month } = event.target.elements;\n        addNewPlan({ title: title.value, month: month.value, note: note.value });\n        this.resetForm();\n\n    }\n    componentDidMount() {\n        const { refreshPlans } = this.props;\n        refreshPlans();\n    }\n    render() {\n        const { budgetPlans, updatePlan,\n            removeItem } = this.props;\n        const dataSource = budgetPlans && budgetPlans.budgetPlans ? budgetPlans.budgetPlans : [];\n        const { loading } = budgetPlans;\n\n        return (\n            <div>\n                {\n                    loading ?\n                        <div class=\"d-flex justify-content-center spinnerCenter\">\n                            <Spinner animation=\"border\" role=\"status\">\n                                <span className=\"sr-only\">loading...</span>\n                            </Spinner>\n                        </div>\n\n                        :\n                        <div>\n                            <Modal show={this.state.showAddPlan} >\n                                <Modal.Header>\n                                    <Modal.Title>Add New Budget</Modal.Title>\n                                </Modal.Header>\n                                <Modal.Body><div>\n                                    <Form onSubmit={this.onFormSubmit.bind(this)}>\n                                        <Form.Group controlId=\"title\">\n                                            <Form.Label>Title</Form.Label>\n                                            <Form.Control name=\"title\" type=\"text\" onChange={(event) => { this.setState({ title: event.target.value }); }} value={this.state.title} placeholder=\"Enter Title\" />\n                                            {/* <Form.Text className=\"text-muted\">\n      We'll never share your email with anyone else.\n    </Form.Text> */}\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Please fill the title.\n          </Form.Control.Feedback>\n                                        </Form.Group>\n\n                                        <Form.Group controlId=\"note\">\n                                            <Form.Label>Note</Form.Label>\n                                            <Form.Control as=\"textarea\" rows=\"3\" onChange={(event) => { this.setState({ note: event.target.value }); }} value={this.state.note} />\n\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                Please fill the note.\n          </Form.Control.Feedback>\n                                        </Form.Group>\n                                        <Form.Group controlId=\"month\">\n                                            <Form.Label>Month</Form.Label>\n                                            <Form.Control as=\"select\" onChange={(event) => { this.setState({ selectedMonth: event.target.value }); }} value={this.state.selectedMonth}>\n                                                <option value=\"January\">January</option>\n                                                <option value=\"Febuary\">Febuary</option>\n                                                <option value=\"March\">March</option>\n                                                <option value=\"April\">April</option>\n                                                <option value=\"May\">May</option>\n                                                <option value=\"June\">June</option>\n                                                <option value=\"July\">July</option>\n                                                <option value=\"August\">August</option>\n                                                <option value=\"September\">September</option>\n                                                <option value=\"October\">October</option>\n                                                <option value=\"November\">November</option>\n                                                <option value=\"December\">December</option>\n                                            </Form.Control>\n\n                                        </Form.Group>\n                                        <div className=\"modal-footer\" style={{ borderTop: \"none\" }}>\n                                            <Button variant=\"secondary\" onClick={this.handleClose.bind(this)}>\n                                                Close\n          </Button>\n                                            <Button variant=\"primary\" type=\"submit\">\n                                                Add\n          </Button>\n                                        </div>\n\n\n                                    </Form>\n                                </div></Modal.Body>\n                            </Modal>\n                            <Table striped bordered hover>\n                                <thead>\n                                    <tr>\n                                        <th>Budget Planner</th>\n                                        <th><Button variant=\"outline-primary\" onClick={() => { this.setState({ showAddPlan: true }) }}>Add New Plan</Button></th>\n                                    </tr>\n                                </thead>\n                            </Table>\n                            <Table striped bordered hover>\n                                <thead>\n                                    <tr>\n                                        <th>Title</th>\n                                        <th>Month</th>\n                                        <th>Income</th>\n                                        <th>Expense</th>\n                                        <th>Total</th>\n                                        <th>Note</th>\n                                        <th>Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        dataSource.length ? dataSource.map(item => (\n                                            this.state.editableId == item.id ?\n                                                <TableRowEditable item={item} onUpdate={(item) => { /*this.updatePlan(item);*/ updatePlan(item);\n                                                    this.setState({ editableId: '' });\n                                                }} onCancel={() => { this.setState({ editableId: '' }) }} ></TableRowEditable> :\n                                                <tr key={item.id}>\n                                                    <td>{item.title}</td>\n                                                    <td>{item.budget_year}</td>\n                                                    <td>{item.income}  AED</td>\n                                                    <td>{item.expense}  AED</td>\n                                                    <td>{item.total}  AED</td>\n                                                    <td>{item.budget_description}</td>\n                                                    <td style={{ display: \"flex\" }}>\n\n                                                        <Button variant=\"outline-primary\" style={{ margin: \"0px 10px\" }} onClick={() => { this.setState({ editableId: item.id }) }}>Edit</Button>\n                                                        <Button variant=\"outline-primary\" onClick={() => (this.props.setSelection(item))}>Transactions</Button>\n                                                        <Button variant=\"outline-primary\" style={{ margin: \"0px 10px\" }} onClick={() => { /*this.removeItem(item)*/removeItem(item) }}>Remove</Button>\n                                                    </td>\n                                                </tr>\n                                        )) : <tr>\n                                                <td colspan=\"7\">No Budget Plans Available.</td>\n                                            </tr>\n                                    }\n                                </tbody>\n                            </Table></div>}</div>);\n\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    budgetPlans: state.budgetPlans\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    //refreshPlans,addNewPlan,updatePlan,removeItem\n    refreshPlans: () => (dispatch(Actions.getBudgetPlans())),\n    addNewPlan: (item) => (dispatch(Actions.addBudgetPlan(item))),\n    updatePlan: (item) => (dispatch(Actions.updateBudgetPlan(item))),\n    removeItem: (item) => (dispatch(Actions.removeBudgetPlan(item.id)))\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BudgetPlans);\n\nclass TableRowEditable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: { ...props.item }\n        }\n    }\n    render() {\n        const { onUpdate, onCancel } = this.props;\n        const { item } = this.state;\n        return (\n            <tr key={item.id}>\n                <td><input type=\"text\" name=\"title\" onChange={(event) => { this.setState({ item: { ...item, title: event.target.value } }); }} value={item.title} /></td>\n                <td>\n                    <Form.Control as=\"select\" onChange={(event) => { this.setState({ item: { ...item, budget_year: item.budget_year.split(' ')[0] + \" \" + event.target.value } }); }} value={item.budget_year.split(' ')[1]}>\n                        <option value=\"January\">January</option>\n                        <option value=\"Febuary\">Febuary</option>\n                        <option value=\"March\">March</option>\n                        <option value=\"April\">April</option>\n                        <option value=\"May\">May</option>\n                        <option value=\"June\">June</option>\n                        <option value=\"July\">July</option>\n                        <option value=\"August\">August</option>\n                        <option value=\"September\">September</option>\n                        <option value=\"October\">October</option>\n                        <option value=\"November\">November</option>\n                        <option value=\"December\">December</option>\n                    </Form.Control>\n                </td>\n\n                <td>{item.income}  AED</td>\n                <td>{item.expense}  AED</td>\n                <td>{item.total}  AED</td>\n                <td><textarea type=\"text\" onChange={(event) => { this.setState({ item: { ...item, budget_description: event.target.value } }); }} value={item.budget_description} /></td>\n\n                <td>\n                    <Button variant=\"outline-primary\" style={{ margin: \"0px 10px\" }} onClick={() => { onUpdate(item) }}>Update</Button>\n                    <Button variant=\"outline-primary\" style={{ margin: \"0px 10px\" }} onClick={() => { onCancel() }}>cancel</Button></td>\n            </tr>\n        )\n    }\n}","//Initiate the api call\n\nconst GET_TRANSACTIONS = 'GET_TRANSACTIONS',\n    GET_TRANSACTIONS_SUCCESS = 'GET_TRANSACTIONS_SUCCESS',\n    GET_TRANSACTIONS_FAILED = 'GET_TRANSACTIONS_FAILED',\n    ADD_TRANSACTION = 'ADD_TRANSACTION',\n    ADD_TRANSACTION_SUCCESS = 'ADD_TRANSACTION_SUCCESS',\n    ADD_TRANSACTION_FAILED = 'ADD_TRANSACTION_FAILED',\n    UPDATE_TRANSACTION = 'UPDATE_TRANSACTION',\n    UPDATE_TRANSACTION_SUCCESS = 'UPDATE_TRANSACTION_SUCCESS',\n    UPDATE_TRANSACTION_FAILED = 'UPDATE_TRANSACTION_FAILED',\n    REMOVE_TRANSACTION = 'REMOVE_TRANSACTION',\n    REMOVE_TRANSACTION_SUCCESS = 'REMOVE_TRANSACTION_SUCCESS',\n    REMOVE_TRANSACTION_FAILED = 'REMOVE_TRANSACTION_FAILED';\n\n\n\nexport default {\n    GET_TRANSACTIONS, GET_TRANSACTIONS_SUCCESS, GET_TRANSACTIONS_FAILED,\n    ADD_TRANSACTION, ADD_TRANSACTION_SUCCESS, ADD_TRANSACTION_FAILED,\n    UPDATE_TRANSACTION, UPDATE_TRANSACTION_SUCCESS, UPDATE_TRANSACTION_FAILED,\n    REMOVE_TRANSACTION, REMOVE_TRANSACTION_SUCCESS, REMOVE_TRANSACTION_FAILED\n};","export const addNewTransaction = async ({ title, type, note, amount,budget_id }) => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    var raw = JSON.stringify({\n        \"note\": note,\n        \"type\": type,\n        \"title\": title,\n        \"amount\": amount,\n        \"budget_id\": budget_id\n    });\n    var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n    let response = await fetch(\"/transaction\", requestOptions);\n    let result = await response.json();\n    return result.response;\n}\n\nexport const updatedTransaction = async (item) => {\n    debugger;\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    var raw = JSON.stringify({ \"note\": item.note, \"type\": item.type, \"title\": item.title, \"amount\": item.amount, \"budget_id\": item.budget_id });\n    var requestOptions = {\n        method: 'PUT',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n    let response = await fetch(`/transaction/${item.id}`, requestOptions);\n    let result = await response.json();\n    return result.response;\n}\n\nexport const removeTransaction = async (item) => {\n    var requestOptions = {\n        method: 'DELETE',\n        redirect: 'follow'\n    };\n    let response = await fetch(`/transaction/${item.id}`, requestOptions);\n    let result = await response.json();\n    console.log(\"data \", result)\n    return result.response;\n\n}\n\nexport const getTransactions = async (budget_id) => {\n    var requestOptions = {\n        method: 'GET',\n        redirect: 'follow'\n    };\n    let response = await fetch(`/transactions/${budget_id}`, requestOptions);\n    let result = await response.json();\n    console.log(\"data \", result)\n    return result.response;\n}\n","import * as actions from '../actions/ledger';\nimport * as budgetPlans from './budgetPlans';\nimport * as service from '../../services/ledgerService';\n\nexport function getTransactions(budget_id) {\n    return (dispatch) => {\n        dispatch(actions.getTransactions());\n        service.getTransactions(budget_id).then((list) => {\n            if (list&&list.map) {\n                dispatch(actions.getTransactionsSuccess(list));\n            } else {\n                throw 'Failed';\n            }\n        }).catch((error) => {\n            console.log(error);\n            dispatch(actions.getTransactionsFailed());\n        });\n    }\n}\nexport function addTransaction(item) {\n    return (dispatch) => {\n        dispatch(actions.addTransaction());\n        service.addNewTransaction(item).then((response) => {\n            if (response == \"Inserted\") {\n                dispatch(actions.addTransactionSuccess());\n                budgetPlans.getBudgetPlans()(dispatch);\n                getTransactions(item.budget_id)(dispatch);\n            } else {\n                throw \"Failed\";\n            }\n        }).catch((error) => {\n            console.log(error);\n            dispatch(actions.addTransactionFailed());\n        });\n    }\n}\nexport function updateTransaction(item) {\n    return (dispatch) => {\n        dispatch(actions.updateTransaction());\n        service.updatedTransaction(item).then((response) => {\n            if (response == \"Updated\") {\n                dispatch(actions.updateTransactionSuccess());\n                budgetPlans.getBudgetPlans()(dispatch);\n                getTransactions(item.budget_id)(dispatch);\n            } else {\n                throw \"Failed\";\n            }\n        }).catch((error) => {\n            console.log(error);\n            dispatch(actions.updateTransactionFailed());\n        });\n    }\n}\nexport function removeTransaction(item) {\n    return (dispatch) => {\n        dispatch(actions.removeTransaction());\n        service.removeTransaction(item).then((response) => {\n            if (response == \"Deleted\") {\n                dispatch(actions.removeTransactionSuccess());\n                budgetPlans.getBudgetPlans()(dispatch);\n                getTransactions(item.budget_id)(dispatch);\n            } else {\n                throw \"Failed\";\n            }\n        }).catch((error) => {\n            console.log(error);\n            dispatch(actions.removeTransactionFailed());\n        });\n    }\n}\nexport default {\n    getTransactions,\n    addTransaction,\n    updateTransaction,\n    removeTransaction\n}","import ledger from '../types/ledger';\n\nexport function getTransactions() {\n    return {\n        type: ledger.GET_TRANSACTIONS\n    }\n}\nexport function getTransactionsSuccess(response) {\n    return {\n        type: ledger.GET_TRANSACTIONS_SUCCESS,\n        payload: {\n            response\n        }\n    }\n}\nexport function getTransactionsFailed() {\n    return {\n        type: ledger.GET_TRANSACTIONS_FAILED\n    }\n}\n\nexport function addTransaction() {\n    return {\n        type: ledger.ADD_TRANSACTION\n    }\n}\nexport function addTransactionSuccess() {\n    return {\n        type: ledger.ADD_TRANSACTION_SUCCESS\n    }\n}\nexport function addTransactionFailed() {\n    return {\n        type: ledger.ADD_TRANSACTION_FAILED\n    }\n}\n\nexport function updateTransaction(){\n    return {\n        type: ledger.UPDATE_TRANSACTION\n    } \n}\n\nexport function updateTransactionSuccess(){\n    return {\n        type: ledger.UPDATE_TRANSACTION_SUCCESS\n    } \n}\nexport function updateTransactionFailed(){\n    return {\n        type: ledger.UPDATE_TRANSACTION_FAILED\n    } \n}\n\nexport function removeTransaction(){\n    return {\n        type: ledger.REMOVE_TRANSACTION\n    }\n}\nexport function removeTransactionSuccess(){\n    return {\n        type: ledger.REMOVE_TRANSACTION_SUCCESS\n    }\n}\nexport function removeTransactionFailed(){\n    return {\n        type: ledger.REMOVE_TRANSACTION_FAILED\n    }\n}\n","import React from \"react\";\nimport { connect } from 'react-redux';\nimport * as Actions from '../redux/middleware/ledger';\nimport { Button, Modal, Form, Table, Container, Spinner } from \"react-bootstrap\";\n//import authentication from '../service/authentication/authentication';\nimport './ledger.css';\n\nclass ledgers extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editableId: \"\",\n            loading: false,\n            showAddTransaction: false,\n            selectedTransactionType: \"I\",\n            budget_id: props.selectedItem.id,\n            transactions: [\n            ]\n        };\n    }\n    componentDidMount() {\n\n        const { getTransactions } = this.props;\n        getTransactions(this.state.budget_id);\n    }\n\n    onFormSubmit(event) {\n        const { addNewTransaction } = this.props;\n        event.preventDefault();\n        event.stopPropagation();\n        const { title, note, amount, type } = event.target.elements;\n        addNewTransaction({ title: title.value, type: type.value, note: note.value, amount: parseFloat(amount.value ? amount.value : 0).toFixed(2), \"budget_id\": this.state.budget_id })\n        this.handleClose();\n\n    }\n    handleClose() {\n        this.setState({ showAddTransaction: false });\n    }\n    render() {\n        const { transactions,\n            loading } = this.props.ledger;\n        const { updateTransaction, removeTransaction } = this.props;\n        const selectedItem = this.props.selectedItem;\n        return (<div>\n            <Modal show={this.state.showAddTransaction} >\n                <Modal.Header>\n                    <Modal.Title>Add New Transaction</Modal.Title>\n                </Modal.Header>\n                <Modal.Body><div>\n                    <Form onSubmit={this.onFormSubmit.bind(this)}>\n                        <Form.Group controlId=\"title\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter Title\" />\n\n                        </Form.Group>\n\n                        <Form.Group controlId=\"note\">\n                            <Form.Label>Note</Form.Label>\n                            <Form.Control as=\"textarea\" rows=\"3\" />\n                        </Form.Group>\n                        <Form.Group controlId=\"amount\">\n                            <Form.Label>Amount</Form.Label>\n                            <Form.Control type=\"number\" step=\".01\" placeholder=\"Enter Amount\" />\n\n                        </Form.Group>\n                        <Form.Group controlId=\"type\">\n                            <Form.Label>Type</Form.Label>\n                            <Form.Control as=\"select\" onChange={(event) => { this.setState({ selectedTransactionType: event.target.value }); }} value={this.state.selectedTransactionType}>\n                                <option value=\"E\">Expense</option>\n                                <option value=\"I\">Income</option>\n                            </Form.Control>\n                        </Form.Group>\n                        <div className=\"modal-footer\" style={{ borderTop: \"none\" }}>\n                            <Button variant=\"secondary\" onClick={this.handleClose.bind(this)}>\n                                Close\n          </Button>\n                            <Button variant=\"primary\" type=\"submit\">\n                                Add\n          </Button>\n                        </div>\n                    </Form>\n                </div></Modal.Body>\n            </Modal>\n            {loading ?\n                <div class=\"d-flex justify-content-center spinnerCenter\">\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                </div> : <div>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                                <th><Button variant=\"outline-primary\" style={{ margin: \"0px 10px\",float:\"left\" }} onClick={() => { this.props.setSelection(null); }}>Back</Button>\n                                <Button variant=\"outline-primary\" style={{float:\"right\"}} onClick={() => { this.setState({ showAddTransaction: true }) }}>Add New Transaction</Button></th>\n                            </tr>\n                        </thead>\n                    </Table>\n\n                    <h3>Budget Plan</h3>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                                <th>Title </th>\n                                <th>Income</th>\n                                <th>Expense</th>\n                                <th>Total</th>\n                                <th>Note </th>\n                            </tr>\n                        </thead>\n                            <tbody>\n                            <tr>\n                                <td>{selectedItem.title}</td>\n                                <td>{selectedItem.income}  AED</td>\n                                <td>{selectedItem.expense} AED</td>\n                                <td>{selectedItem.total} AED</td>\n                                <td>{selectedItem.budget_description}</td>\n                            </tr>\n                            </tbody>\n                            </Table>\n\n                    <h3>Transactions</h3>\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                                <th>Title</th>\n                                <th>Note</th>\n                                <th>Amount</th>\n                                <th>Type</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                transactions.length ? transactions.map(item => {\n                                    return this.state.editableId == item.id ?\n                                        <TableRowEditable item={item} onUpdate={(item) => { updateTransaction(item); this.setState({ editableId: '' }) /*this.updateTransaction(item);*/ }} onCancel={() => { this.setState({ editableId: '' }) }}></TableRowEditable> :\n                                        <TableRowView item={item} onClickEdit={(id) => { this.setState({ editableId: id }) }} onClickRemove={(item) => { /*this.removeTransaction(item);*/ removeTransaction(item); }} ></TableRowView>\n                                }\n                                ) : <tr>\n                                        <td colspan=\"5\">No Transaction Available.</td>\n                                    </tr>\n                            }\n                        </tbody>\n                    </Table>\n                </div>\n            }\n        </div>);\n    }\n}\n\n\nconst mapStateToProps = (state) => ({\n    ledger: state.ledger\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    getTransactions: (budget_id) => (dispatch(Actions.getTransactions(budget_id))),\n    addNewTransaction: (item) => (dispatch(Actions.addTransaction(item))),\n    updateTransaction: (item) => (dispatch(Actions.updateTransaction(item))),\n    removeTransaction: (item) => (dispatch(Actions.removeTransaction(item)))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ledgers);\n\nconst TableRowView = (props) => {\n    const { item, onClickEdit, onClickRemove } = props;\n    return (\n        <tr key={item.id}>\n            <td>{item.title}</td>\n            <td>{item.note}</td>\n            <td>{item.amount} AED</td>\n            <td>{item.type == \"I\" ? \"Income\" : \"Expense\"}</td>\n            <td>\n                <Button variant=\"outline-primary\" style={{ margin: \"0px 10px\" }} onClick={() => { onClickEdit(item.id) }}>Edit</Button>\n                <Button variant=\"outline-primary\" style={{ margin: \"0px 10px\" }} onClick={() => { onClickRemove(item) }}>Remove</Button></td>\n        </tr>\n    )\n}\nclass TableRowEditable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: { ...props.item }\n        }\n    }\n    render() {\n        const { onUpdate, onCancel } = this.props;\n        const { item } = this.state;\n        return (\n            <tr key={item.id}>\n                <td><input type=\"text\" name=\"title\" onChange={(event) => { this.setState({ item: { ...item, title: event.target.value } }); }} value={item.title} /></td>\n                <td><textarea type=\"text\" name=\"note\" onChange={(event) => { this.setState({ item: { ...item, note: event.target.value } }); }} value={item.note} /></td>\n                <td><input type=\"number\" step=\".01\" name=\"amount\" onChange={(event) => { this.setState({ item: { ...item, amount: event.target.value } }); }} value={item.amount} /></td>\n                <td><Form.Control as=\"select\" onChange={(event) => { this.setState({ item: { ...item, type: event.target.value } }); }} value={item.type}>\n                    <option value=\"E\">Expense</option>\n                    <option value=\"I\">Income</option>\n                </Form.Control></td>\n                <td>\n                    <Button variant=\"outline-primary\" style={{ margin: \"0px 10px\" }} onClick={() => { onUpdate(item) }}>Update</Button>\n                    <Button variant=\"outline-primary\" style={{ margin: \"0px 10px\" }} onClick={() => { onCancel() }}>cancel</Button></td>\n            </tr>\n        )\n    }\n}\n","import React from \"react\";\nimport { connect } from 'react-redux';\nimport { Button, Modal, Form, Table, Container } from \"react-bootstrap\";\nimport Actions from '../redux/middleware/budgetPlans';\nimport Picker from 'react-month-picker';\nimport BudgetPlans from '../components/budgetPlans';\nimport Ledger from '../components/ledger';\n\nclass BudgetPlanDashboard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedItem: null,\n            showAddPlan: false,\n            selectedMonth: '',\n            transactions: [\n            ]\n        }\n    }\n    setSelection(item) {\n        this.setState({ selectedItem: item });\n    }\n    async refresh(action) {\n        var requestOptions = {\n            method: 'GET',\n            headers: { \"Access-Control-Allow-Origin\": \"*\" },\n            redirect: 'follow'\n        };\n        try {\n            debugger;\n            let response = await fetch(\"/plans\", requestOptions);\n            let result = await response.json();\n            this.setState({ dataSource: result.response });\n            if (this.state.selectedItem) {\n                result.response.map((item) => {\n                    if (item.id == this.state.selectedItem.id) {\n                        this.setState({ selectedItem: item });\n                    }\n                });\n            }\n            action && action();\n        } catch (error) {\n            console.log('error', error);\n            action && action();\n        }\n    }\n    render() {\n        let { selectedItem } = this.state;\n        const { budgetPlans } = this.props;\n        const dataSource = budgetPlans && budgetPlans.budgetPlans ? budgetPlans.budgetPlans : [];\n        if (selectedItem) {\n            dataSource.map((item) => {\n                if (item.id == selectedItem.id) {\n                    selectedItem = item;\n                }\n            });\n        }\n        return (\n            <Container>\n\n                {\n                    selectedItem ? <Ledger selectedItem={selectedItem} refreshPlans={this.refresh.bind(this)} setSelection={this.setSelection.bind(this)}></Ledger>\n                        : <BudgetPlans dataSource={this.state.dataSource} refreshPlans={this.refresh.bind(this)} setSelection={this.setSelection.bind(this)}></BudgetPlans>\n\n                }\n\n            </Container>\n        );\n\n    }\n}\n\n\nconst mapStateToProps = (state) => ({\n    budgetPlans:state.budgetPlans\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BudgetPlanDashboard);","import React from 'react';\nimport BudgetPlans from './container/Budgetdashboard';\nimport logo from './logo.svg';\nimport './App.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BudgetPlans></BudgetPlans>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import actionType from '../types/budgetPlans';\nconst initialState = {\n    budgetPlans: [],\n    loading: false,\n    error: ''\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionType.GET_BUDGET_PLANS:\n            return { ...state, loading: true };\n        case actionType.GET_BUDGET_PLANS_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                budgetPlans: action.payload.response\n            };\n        case actionType.GET_BUDGET_PLANS_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            };\n        case actionType.ADD_BUDGET_PLAN:\n            return { ...state, loading: true };\n        case actionType.ADD_BUDGET_PLAN_SUCCESS:\n            return {\n                ...state,\n                loading: false\n            };\n        case actionType.ADD_BUDGET_PLAN_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            };\n        case actionType.UPDATE_BUDGET_PLAN:\n            return { ...state, loading: true };\n        case actionType.UPDATE_BUDGET_PLAN_SUCCESS:\n            return {\n                ...state,\n                loading: false\n            };\n        case actionType.UPDATE_BUDGET_PLAN_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            };\n        case actionType.REMOVE_BUDGET_PLAN:\n            return { ...state, loading: true };\n        case actionType.REMOVE_BUDGET_PLAN_SUCCESS:\n            return {\n                ...state,\n                loading: false\n            };\n        case actionType.REMOVE_BUDGET_PLAN_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            };\n        default:\n            return state;\n    }\n}\nexport default reducer;","import actionType from '../types/ledger';\nconst initialState = {\n    transactions: [],\n    loading: false,\n    error: ''\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionType.GET_TRANSACTIONS:\n            return { ...state, loading: true };\n        case actionType.GET_TRANSACTIONS_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                transactions: action.payload.response\n            };\n        case actionType.GET_TRANSACTIONS_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            };\n        case actionType.ADD_TRANSACTION:\n            return { ...state, loading: true };\n        case actionType.ADD_TRANSACTION_SUCCESS:\n            return {\n                ...state,\n                loading: false\n            };\n        case actionType.ADD_TRANSACTION_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            };\n        case actionType.UPDATE_TRANSACTION:\n            return { ...state, loading: true };\n        case actionType.UPDATE_TRANSACTION_SUCCESS:\n            return {\n                ...state,\n                loading: false\n            };\n        case actionType.UPDATE_TRANSACTION_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            };\n        case actionType.REMOVE_TRANSACTION:\n            return { ...state, loading: true };\n        case actionType.REMOVE_TRANSACTION_SUCCESS:\n            return {\n                ...state,\n                loading: false\n            };\n        case actionType.REMOVE_TRANSACTION_FAILED:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            };\n        default:\n            return state;\n    }\n}\nexport default reducer;","import { combineReducers } from 'redux';\nimport budgetPlans from './budgetPlans';\n\nimport ledger from './ledger';\n\nexport default combineReducers({\n    budgetPlans,\n    ledger\n});","import { createStore, compose, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\n\nconst enhancerList = [];\nconst devToolsExtension = window && window.__REDUX_DEVTOOLS_EXTENSION__;\n\nif (typeof devToolsExtension === 'function') {\n    enhancerList.push(devToolsExtension());\n}\n\nconst composedEnhancer = compose(applyMiddleware(thunk),/* applyMiddleware(someReduxMiddleware, someOtherReduxMiddleware),*/ ...enhancerList);\n\nexport const initStore = () => createStore(rootReducer, {}, composedEnhancer);\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { initStore } from './redux/store.js';\nconst store = initStore();\n\nclass Application extends React.Component {\n  render () {\n    return (\n      <Provider store={store}>\n        <App />\n      </Provider>\n    );\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Application />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}